//
//  ListPodcastsViewController.swift
//  TopPodcasts
//
//  Created by Sander Korebrits on 17/08/2018.
//  Copyright (c) 2018 designlapp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPodcastsDisplayLogic: class{
    func displayListPodcasts(viewModel: ListPodcasts.ListPodcasts.ViewModel)
}

class ListPodcastsViewController: UIViewController{
    var interactor: ListPodcastsBusinessLogic?
    var router: (NSObjectProtocol & ListPodcastsRoutingLogic & ListPodcastsDataPassing)?
    lazy var refreshControl: UIRefreshControl = {
        let refresh = UIRefreshControl()
        return refresh
    }()
    lazy var collectionViewDatasource: ListPodcastsCollectionViewDatasource = {
        let datasource = ListPodcastsCollectionViewDatasource(collectionView: self.collectionView)
        return datasource
    }()
    
    // Mark: Oulets
    @IBOutlet weak var collectionView: UICollectionView!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup(){
        let viewController = self
        let interactor = ListPodcastsInteractor()
        let presenter = ListPodcastsPresenter()
        let router = ListPodcastsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func viewDidLoadSetup(){
        title = "Top Podcasts"
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "Back", style: .plain, target: nil, action: nil)
        collectionView.dataSource = collectionViewDatasource
        collectionView.alwaysBounceVertical = true
        collectionViewDatasource.delegate = self
        collectionView.addSubview(refreshControl)
        refreshControl.addTarget(self, action: #selector(listPodcasts), for: UIControlEvents.valueChanged)
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
          let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
          if let router = router, router.responds(to: selector) {
            router.perform(selector, with: segue)
          }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        
        viewDidLoadSetup()
        listPodcasts()
    }
}

extension ListPodcastsViewController: ListPodcastsDisplayLogic{
    func displayListPodcasts(viewModel: ListPodcasts.ListPodcasts.ViewModel) {
        if viewModel.response.success{
            collectionViewDatasource.updateWithViewModel(viewModel: viewModel)
            if refreshControl.isRefreshing{
                refreshControl.endRefreshing()
            }
        }else{
            displayErrorMessage(errorMessage: viewModel.response.errorMessage)
        }
    }
}

extension ListPodcastsViewController: ListPodcastsCollectionViewDatasourceDelegate{
    func listPodcastsDelegateDidSelectIndexPath(indexPath: IndexPath) {
        performSegue(withIdentifier: "ShowPodcast", sender: nil)
    }
}

// MARK: - Methods
extension ListPodcastsViewController{
    func startRefreshing(){
        if !refreshControl.isRefreshing{
            refreshControl.beginRefreshing()
        }
    }
    
    @objc func listPodcasts(){
        startRefreshing()
        let request = ListPodcasts.ListPodcasts.Request()
        interactor?.listPodcasts(request: request)
    }
    
    func displayErrorMessage(errorMessage: String?){
        let alertController = UIAlertController(title: "Error", message: errorMessage, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        present(alertController, animated: true) { [weak self] in
            if (self?.refreshControl.isRefreshing == true){
                self?.refreshControl.endRefreshing()
            }
        }
    }
}
