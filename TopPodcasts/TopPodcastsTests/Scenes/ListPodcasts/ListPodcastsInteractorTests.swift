//
//  ListPodcastsInteractorTests.swift
//  TopPodcasts
//
//  Created by Sander Korebrits on 17/08/2018.
//  Copyright (c) 2018 designlapp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TopPodcasts
import XCTest
import OHHTTPStubs

class ListPodcastsInteractorTests: XCTestCase{
    
    // MARK: Subject under test
    var sut: ListPodcastsInteractor!
  
    // MARK: Test lifecycle
    override func setUp(){
        super.setUp()
        setupListPodcastsInteractor()
    }
  
    override func tearDown(){
        super.tearDown()
        OHHTTPStubs.removeAllStubs()
    }
  
    // MARK: Test setup
    func setupListPodcastsInteractor(){
        sut = ListPodcastsInteractor()
    }
  
    // MARK: Test doubles
    class ListPodcastsPresentationLogicSpy: ListPodcastsPresentationLogic{
        var presentListPodcastsCalled = false
        var presentPodcastCalled = false
    
        func presentListPodcasts(response: ListPodcasts.ListPodcasts.Response){
            presentListPodcastsCalled = true
        }
        
        func presentPodcast(response: ListPodcasts.FetchImage.Response) {
            presentPodcastCalled = true
        }
    }
  
    // MARK: Tests
    func testListPodcasts(){
        /*
         https://rss.itunes.apple.com/api/v1/nl/podcasts/top-podcasts/all/25/explicit.json
         */
        let bundle = Bundle(for: type(of: self))
        stub(condition: isHost("rss.itunes.apple.com")) { (request) -> OHHTTPStubsResponse in
            return OHHTTPStubsResponse(fileURL: bundle.url(forResource: "TopPodcastsResponse", withExtension: "json")!, statusCode: 200, headers: nil)
        }
        
        // Given
        let spy = ListPodcastsPresentationLogicSpy()
        sut.presenter = spy
        let request = ListPodcasts.ListPodcasts.Request()
    
        // When
        sut.listPodcasts(request: request)
        
        let excepting = XCTestExpectation(description: "Should Present List")
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            // Then
            XCTAssertTrue(spy.presentListPodcastsCalled, "doSomething(request:) should ask the presenter to format the result")
            excepting.fulfill()
        }
        wait(for: [excepting], timeout: 5)
        
    }
    
    func testFetchImage(){
       
        let bundle = Bundle(for: type(of: self))
        stub(condition: isHost("is4-ssl.mzstatic.com")) { (request) -> OHHTTPStubsResponse in
            return OHHTTPStubsResponse(fileURL: bundle.url(forResource: "200x200bb", withExtension: "png")!, statusCode: 200, headers: nil)
        }
        
        //Given
        let spy = ListPodcastsPresentationLogicSpy()
        sut.presenter = spy
        sut.podcasts = [Podcast()]
        let request = ListPodcasts.FetchImage.Request(row: 0)
        
        //When
        sut.fetchPodcastImage(request: request)
        
        let excepting = XCTestExpectation(description: "Should fech image")
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            // Then
            XCTAssertTrue(spy.presentPodcastCalled, "doSomething(request:) should ask the presenter to format the result")
            excepting.fulfill()
        }
        wait(for: [excepting], timeout: 5)
    }
}
