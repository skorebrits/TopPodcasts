//
//  ListPodcastsViewControllerTests.swift
//  TopPodcasts
//
//  Created by Sander Korebrits on 17/08/2018.
//  Copyright (c) 2018 designlapp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TopPodcasts
import XCTest

class ListPodcastsViewControllerTests: XCTestCase{
    
    // MARK: Subject under test
    var sut: ListPodcastsViewController!
    var window: UIWindow!

    // MARK: Test lifecycle
    override func setUp(){
        super.setUp()
        window = UIWindow()
        setupListPodcastsViewController()
    }

    override func tearDown(){
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupListPodcastsViewController(){
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ListPodcastsViewController") as! ListPodcastsViewController
    }

    func loadView(){
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles
    class ListPodcastsBusinessLogicSpy: ListPodcastsBusinessLogic{
        var listPodcastsCalled = false
        var fetchPodcastCalled = false

        func listPodcasts(request: ListPodcasts.ListPodcasts.Request) {
            listPodcastsCalled = true
        }
        
        func fetchPodcastImage(request: ListPodcasts.FetchImage.Request) {
            fetchPodcastCalled = true
        }
    }

    // MARK: Tests
    func testShouldListPodcastsWhenViewIsLoaded(){
        // Given
        let spy = ListPodcastsBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.listPodcastsCalled, "viewDidLoad() should ask the interactor to do something")
    }

    func testDisplayListPodcasts(){
        // Given
        let response = ListPodcasts.ListPodcasts.Response(podcasts: [], success: true, errorMessage: nil)
        let viewModel = ListPodcasts.ListPodcasts.ViewModel(response: response, displayModels: [])

        // When
        loadView()
        sut.displayListPodcasts(viewModel: viewModel)

        // Then
        //XCTAssertEqual(sut.nameTextField.text, "", "displaySomething(viewModel:) should update the name text field")
    }
    
    func testDispayPodcast(){
        
    }
}
