//
//  ListPodcastsPresenterTests.swift
//  TopPodcasts
//
//  Created by Sander Korebrits on 17/08/2018.
//  Copyright (c) 2018 designlapp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TopPodcasts
import XCTest

class ListPodcastsPresenterTests: XCTestCase{
    
    // MARK: Subject under test
    var sut: ListPodcastsPresenter!

    // MARK: Test lifecycle
    override func setUp(){
        super.setUp()
        setupListPodcastsPresenter()
    }

    override func tearDown(){
        super.tearDown()
    }

    // MARK: Test setup
    func setupListPodcastsPresenter(){
        sut = ListPodcastsPresenter()
    }

    // MARK: Test doubles
    class ListPodcastsDisplayLogicSpy: ListPodcastsDisplayLogic{
        var displayListPodcastsCalled = false
        var displayPodcastCalled = false

        func displayListPodcasts(viewModel: ListPodcasts.ListPodcasts.ViewModel){
            displayListPodcastsCalled = true
        }
        
        func displayPodcast(viewModel: ListPodcasts.FetchImage.ViewModel) {
            displayPodcastCalled = true
        }
    }

    // MARK: Tests
    func testPresentListPodcasts(){
        
        // Given
        let spy = ListPodcastsDisplayLogicSpy()
        sut.viewController = spy
        let response = ListPodcasts.ListPodcasts.Response(podcasts: [], success: true, errorMessage: nil)

        // When
        sut.presentListPodcasts(response: response)

        // Then
        XCTAssertTrue(spy.displayListPodcastsCalled, "presentSomething(response:) should ask the view controller to display the result")
    }
    
    func testPresentFetchedPodcast(){
        // Given
        let spy = ListPodcastsDisplayLogicSpy()
        sut.viewController = spy
        let response = ListPodcasts.FetchImage.Response(podcast: Podcast(), row: 0, success: true, errorMessage: nil)
        
        // When
        sut.presentPodcast(response: response)
        
        // Then
        XCTAssertTrue(spy.displayPodcastCalled, "presentSomething(response:) should ask the view controller to display the result")
    }
}
